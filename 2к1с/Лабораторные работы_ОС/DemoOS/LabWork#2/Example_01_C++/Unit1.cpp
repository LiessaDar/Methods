//---------------------------------------------------------------------------
//Демонстрационный проэкт к лабораторной работе №2
//ПЕРВАЯ ПРОГРАММА
//---------------------------------------------------------------------------
//ЗАДАНИЕ: создать программу, которая запускает вторую программу, переходит в
//режим ожидания на несколько секунд, после чего завершает свою роботу,
//вторая программа должна дождаться завершения первой и выдать сообщение о
//своем завершении
//---------------------------------------------------------------------------
//Подключаем необходимые библиотеки
#include <windows.h>
#include <iostream.h>
#include <string.h>

#pragma hdrstop
#pragma argsused

//------Главная функция программы--------------------------------------------
int main(int argc, char* argv[]) {
  char cmd[128];   //указатель на строку для команды запуска второго процесса
  //проверяем аргументы командной строки
  if (argc!=1)
    //если указан какой либо параметр, то первый параметр принимаем за имя
    //второй программы
    strcpy(cmd, argv[1]);
  else
    //иначе по умолчанию будет использовано имя slave.exe
    strcpy(cmd,"slave.exe");
  //получаем идентификатор текущего процесса
  int  pid=GetCurrentProcessId();
  //выводим его на экран
  sprintf(cmd+strlen(cmd)," %d",pid);
  cout<<"Master pid - "<<pid<<"\n";
  cout<<"Master: starting "<<cmd<<"\n";
  //описываем дополнительные структуры для хранения информации о запускаемом
  //процессе
  STARTUPINFO info;
  PROCESS_INFORMATION pinfo;
  //выделяем необходимую память для информационных структур
  memset(&info, 0 , sizeof(info));
  info.cb=sizeof(info);
  //пытаемся запустить второй процесс
  if (!CreateProcess(NULL,
                     cmd, //командная строка запуска второго процесса
                     NULL,
                     NULL,
                     FALSE,
                     NORMAL_PRIORITY_CLASS, //приоритет процесса
                     NULL,
                     NULL,
                     &info,
                     &pinfo)) {
    //в случае неудачи выводим сообщение об ошибке
    cout<<"Master: Slave was not running!"<<"\n";
    cout<<"Master: Check argument string!"<<"\n";
    //завершаем аварийно работу программы
    return 1;
  }
  //выводим собщение о приостановки первой программы
  cout<<"Master: sleeping!"<<"\n";
  //останавливаем выполнение первой программы на 15 секунд
  Sleep(15000);
  //выводим сообщение о завершении работы первой программы
  cout<<"Master: exiting!"<<"\n";
  //завершаем работу программы
  return 0;
}
//-------Конец главной функции программы-------------------------------------

